name: Build, test and deploy to production
run-name: Deploy production
on:
  push:
    branches:
      - "main"
      - "releases/**"

jobs:
  test:
    name: Run test
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ secrets.DOCKERHUB_USERNAME }}
      - uses: actions/checkout@v3
      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
      - name: Install PHP dependencies
        id: install-php-dependencies
        run: composer install
      - name: Test Laravel App
        id: test-laravel
        run: php artisan test
  build:
    needs: test
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/lamkimphu258/thich-hoc:latest
            ghcr.io/lamkimphu258/thich-hoc:${{ github.run_number }}

  deploy-prod:
    needs: build
    name: Deploy container to EC2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy in EC2
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem && awk '{gsub(/\\n/,"\n")}1' key.pem > /dev/null 2>&1&& chmod 400 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem ./production.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/thich_hoc/docker-compose.yml
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} '
            cd thich_hoc &&
            docker-compose pull &&
            docker-compose up -d &&
            docker image prune -f &&
            docker-compose exec -T app php artisan config:cache &&
            docker-compose exec -T app php artisan route:cache &&
            docker-compose exec -T app php artisan view:cache 
          '
