name: Test and deploy to stage
run-name: Test and deploy stage
on:
  push:
    branches:
      - "stage"

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.24.0
        with:
          php-version: "8.1"
          coverage: pcov
          extensions: zip tidy
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Create artifact folder
        run: mkdir -p tmp/artifacts
      - name: Execute tests (Unit and coverage)
        id: run-test
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test --testsuite=Unit --coverage-html /tmp/artifacts/coverage_report/
      - uses: actions/upload-artifact@v3
        if: steps.run-test.outcome == 'success'
        with:
          name: test-coverage
          path: /tmp/artifacts/coverage_report/

  deploy-dev:
    needs: test
    name: Deploy to Stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Dokku
        uses: dokku/github-action@v1.4.0
        with:
          branch: main
          ci_branch_name: ${{ github.GITHUB_REF_NAME }}
          git_push_flags: --force
          git_remote_url: ssh://dokku@${{ secrets.IP_ADDRESS }}:22/stage
          ssh_private_key: ${{ secrets.DEPLOYER_SSH_PRIVATE_KEY }}

  # deploy-staging:
  #   needs: test
  #   name: Deploy to Staging
  #   steps:

  # build:
  #   name: Build image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: echo ${{ secrets.DOCKERHUB_USERNAME }}
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ghcr.io/lamkimphu258/thich-hoc:latest
  #           ghcr.io/lamkimphu258/thich-hoc:${{ github.run_number }}
  #
  # deploy-prod:
  #   needs: build
  #   name: Deploy container to EC2
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Deploy in EC2
  #       run: |
  #         echo "${{ secrets.SSH_KEY }}" > key.pem && awk '{gsub(/\\n/,"\n")}1' key.pem > /dev/null 2>&1&& chmod 400 key.pem
  #         scp -o StrictHostKeyChecking=no -i key.pem ./production.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/thich_hoc/docker-compose.yml
  #         ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} '
  #           cd thich_hoc &&
  #           docker-compose pull &&
  #           docker-compose up -d &&
  #           docker image prune -f &&
  #           docker-compose exec -T app php artisan config:cache &&
  #           docker-compose exec -T app php artisan route:cache &&
  #           docker-compose exec -T app php artisan view:cache &&
  #           docker-compose exec -T app php artisan storage:link
  #         '
